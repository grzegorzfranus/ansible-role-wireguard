---
# =============================================================================
# Ansible Role: WireGuard Mesh - Variable Validation
# =============================================================================
# This file contains validation tasks to ensure all required variables are properly
# defined and have valid values. It performs comprehensive checks on configuration
# parameters, network settings, and system requirements.
#
# Flow:
# 1. Inventory and Host Validation
# 2. Network Configuration Validation
# 3. Service and Interface Validation
# 4. Security Settings Validation
# 5. Logging Configuration Validation
# =============================================================================

# -----------------------------------------------------------------------------
# 1. Inventory and Host Validation
# -----------------------------------------------------------------------------
- name: 🧪 WireGuard | assert | Check inventory group exists
  ansible.builtin.assert:
    that:
      - wireguard_inventory_group in groups
    fail_msg: "❌ Inventory group '{{ wireguard_inventory_group }}' does not exist"
    success_msg: "✅ Inventory group '{{ wireguard_inventory_group }}' exists with {{ groups[wireguard_inventory_group] | length }} hosts"

- name: 🧪 WireGuard | assert | Check minimum hosts for mesh (production)
  ansible.builtin.assert:
    that:
      - groups[wireguard_inventory_group] | length >= 2
    fail_msg: "❌ WireGuard mesh requires at least 2 hosts. Current: {{ groups[wireguard_inventory_group] | length }}"
    success_msg: "✅ Sufficient hosts for mesh network ({{ groups[wireguard_inventory_group] | length }} hosts)"
  when: >
    not (wireguard_molecule_test_mode | default(false))

- name: 🧪 WireGuard | assert | Check subnet capacity
  ansible.builtin.assert:
    that:
      - groups[wireguard_inventory_group] | length <= 253
    fail_msg: "❌ Too many hosts in group '{{ wireguard_inventory_group }}': {{ groups[wireguard_inventory_group] | length }}. Maximum 253 hosts supported for /24 subnet."
    success_msg: "✅ Host count is within subnet capacity ({{ groups[wireguard_inventory_group] | length }}/253)"

# -----------------------------------------------------------------------------
# 2. Network Configuration Validation
# -----------------------------------------------------------------------------
- name: 🧪 WireGuard | assert | Validate network configuration
  ansible.builtin.assert:
    that:
      - wireguard_network_base is defined
      - wireguard_network_base is string
      - wireguard_network_base | regex_search('^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$')
      - wireguard_network_prefix is defined
      - wireguard_network_prefix is string
      - wireguard_network_prefix | regex_search('^([0-9]{1,3}\.){2}[0-9]{1,3}$')
      - wireguard_port is defined
      - wireguard_port is number
      - wireguard_port >= 1024
      - wireguard_port <= 65535
      - wireguard_persistent_keepalive is defined
      - wireguard_persistent_keepalive is number
      - wireguard_persistent_keepalive >= 10
      - wireguard_persistent_keepalive <= 60
    fail_msg: "❌ Invalid network configuration. Check network_base format (e.g., '10.0.0.0/24') and network_prefix (e.g., '10.0.0')"
    success_msg: "✅ Network configuration is valid"

- name: 🔍 WireGuard | assert | Validate WireGuard port not in use
  ansible.builtin.command: bash -c "ss -lun | awk '{print $5}' | grep -E '(^|:){{ wireguard_port }}$' || true"
  register: wireguard_port_check
  changed_when: false
  failed_when: false

- name: 🧪 WireGuard | assert | Port availability check
  ansible.builtin.assert:
    that:
      - wireguard_port_check.stdout | trim == ''
    fail_msg: "❌ UDP port {{ wireguard_port }} appears to be in use on {{ inventory_hostname }}"
    success_msg: "✅ UDP port {{ wireguard_port }} is free"
  when: >
    not ansible_check_mode

# -----------------------------------------------------------------------------
# 3. Service and Interface Validation
# -----------------------------------------------------------------------------
- name: 🧪 WireGuard | assert | Validate interface name
  ansible.builtin.assert:
    that:
      - wireguard_interface is defined
      - wireguard_interface is string
      - wireguard_interface | length > 0
      - wireguard_interface | regex_search('^[a-zA-Z][a-zA-Z0-9]*$')
      - wireguard_mtu is defined
      - wireguard_mtu is number
      - wireguard_mtu >= 1280
      - wireguard_mtu <= 1500
    fail_msg: "❌ Invalid interface name: {{ wireguard_interface }}"
    success_msg: "✅ Interface name is valid"

# -----------------------------------------------------------------------------
# 4. Security Settings Validation
# -----------------------------------------------------------------------------
- name: 🧪 WireGuard | assert | Validate service settings
  ansible.builtin.assert:
    that:
      - wireguard_service_enabled is defined
      - wireguard_service_enabled is boolean
      - wireguard_restart_on_change is defined
      - wireguard_restart_on_change is boolean
      - wireguard_enable_service is defined
      - wireguard_enable_service is boolean
      - wireguard_start_service is defined
      - wireguard_start_service is boolean
      - wireguard_service_timeout is defined
      - wireguard_service_timeout is number
      - wireguard_service_timeout >= 10
      - wireguard_service_timeout <= 60
    fail_msg: "❌ Invalid service configuration"
    success_msg: "✅ Service configuration is valid"

- name: 🧪 WireGuard | assert | Validate directory paths
  ansible.builtin.assert:
    that:
      - wireguard_config_dir is defined
      - wireguard_config_dir is string
      - wireguard_config_dir | length > 0
      - wireguard_config_dir.startswith('/')
      - wireguard_config_permissions is defined
      - wireguard_config_permissions is string
      - wireguard_config_permissions | regex_search('^0[0-7]{3}$')
      - wireguard_private_key_permissions is defined
      - wireguard_private_key_permissions is string
      - wireguard_private_key_permissions | regex_search('^0[0-7]{3}$')
      - wireguard_public_key_permissions is defined
      - wireguard_public_key_permissions is string
      - wireguard_public_key_permissions | regex_search('^0[0-7]{3}$')
      - wireguard_backup_config is defined
      - wireguard_backup_config is boolean
    fail_msg: "❌ Invalid configuration directory: {{ wireguard_config_dir }}"
    success_msg: "✅ Configuration directory is valid"

- name: 🧪 WireGuard | assert | Validate PSK settings
  ansible.builtin.assert:
    that:
      - wireguard_enable_psk is defined
      - wireguard_enable_psk is boolean
      - wireguard_generate_psk is defined
      - wireguard_generate_psk is boolean
      - wireguard_psk_permissions is defined
      - wireguard_psk_permissions is string
      - wireguard_psk_permissions | regex_search('^0[0-7]{3}$')
    fail_msg: "❌ Invalid PSK configuration"
    success_msg: "✅ PSK configuration is valid"
  when: >
    wireguard_enable_psk | bool

- name: 🧪 WireGuard | assert | Check-mode limitations for PSK generation
  ansible.builtin.assert:
    that:
      - not ansible_check_mode or (ansible_check_mode and (wireguard_generate_psk | bool == false))
    fail_msg: "❌ In --check mode and PSK would need generation or consolidation. Disable --check or set wireguard_generate_psk: false."
    success_msg: "✅ PSK settings compatible with --check mode"
  when: >
    wireguard_enable_psk | bool
  tags:
    - validate
    - check

# -----------------------------------------------------------------------------
# 5. Logging Configuration Validation
# -----------------------------------------------------------------------------
- name: 🧪 WireGuard | assert | Validate logging settings
  ansible.builtin.assert:
    that:
      - wireguard_enable_logging is defined
      - wireguard_enable_logging is boolean
      - wireguard_logging_backend is defined
      - wireguard_logging_backend in ['rsyslog', 'journald']
      - wireguard_log_dir is defined
      - wireguard_log_dir is string
      - wireguard_log_dir | length > 0
      - wireguard_log_dir.startswith('/')
      - wireguard_log_file is defined
      - wireguard_log_file is string
      - wireguard_log_file | length > 0
      - wireguard_log_file.startswith('/')
      - wireguard_syslog_identifier is defined
      - wireguard_syslog_identifier is string
      - wireguard_syslog_identifier | length > 0
      - wireguard_log_file_permissions is defined
      - wireguard_log_file_permissions is string
      - wireguard_log_file_permissions | regex_search('^0[0-7]{3}$')
      - wireguard_log_dir_permissions is defined
      - wireguard_log_dir_permissions is string
      - wireguard_log_dir_permissions | regex_search('^0[0-7]{3}$')
    fail_msg: "❌ Invalid logging configuration"
    success_msg: "✅ Logging configuration is valid"
  when: >
    wireguard_enable_logging | bool

- name: 🧪 WireGuard | assert | Validate DNS settings
  ansible.builtin.assert:
    that:
      - wireguard_configure_dns is defined
      - wireguard_configure_dns is boolean
      - (not wireguard_configure_dns) or (wireguard_dns_servers is defined and wireguard_dns_servers is sequence)
    fail_msg: "❌ Invalid DNS configuration"
    success_msg: "✅ DNS configuration is valid"

- name: 🧪 WireGuard | assert | Validate role action
  ansible.builtin.assert:
    that:
      - wireguard_role_action in ['all','install','configure']
    fail_msg: "❌ Invalid wireguard_role_action: {{ wireguard_role_action }}"
    success_msg: "✅ Role action is valid: {{ wireguard_role_action }}"
